/*5. 外观模式

概念解读
外观模式(facade): 为子系统中的一组接口提供一个一致的表现,使得子系统更容易使用而不需要关注内部复杂而繁琐的细节.比如下图就是一个很好形象的说明外观模式的设计思路:

作用

对接口和调用者进行了一定的解耦
创造经典的三层结构MVC
在开发阶段减少不同子系统之间的依赖和耦合,方便各个子系统的迭代和扩展
为大型复杂系统提供一个清晰的接口

注意事项
当外观模式被开发者连续调用时会造成一定的性能损耗,这是由于每次调用都会进行可用性检测
实际案例
我们可以使用外观模式来设计兼容不同浏览器的事件绑定的方法以及其他需要统一实现接口的方法或者抽象类.
代码展示
接下来我们通过实现一个兼容不同浏览器的事件监听函数来让大家理解外观模式如何使用.*/

function on(type, fn){
    // 对于支持dom2级事件处理程序
    if(document.addEventListener){
        dom.addEventListener(type,fn,false);
    }else if(dom.attachEvent){
    // 对于IE9一下的ie浏览器
        dom.attachEvent('on'+type,fn);
    }else {
        dom['on'+ type] = fn;
    }
  }